// 正则表达式
// 元字符       |          作用
// . ：匹配任意字符除了换行符和回车符   
// []：匹配方括号内的任意字符。比如[0-9]就可以用来匹配任意数字
// ^ ： ^9,这样使用代表匹配以9开头。[^9],这样使用代表匹配方括号内除了9的字符
// {1,2}:匹配1到2位字符
// (yck):只匹配和yck相同字符串
//  | :匹配 | 前后任意字符
//  \ : 转义
//  * ：只匹配出现0次及以上 * 前的字符
//  + ：只匹配出现1次及以上 + 前的字符
//  ? : ? 之前字符可选

// 修饰语  作用
//  i: 忽略大小写
//  g: 全局搜索
//  m: 多行

// 字符简写  作用
// \w : 匹配字母数字或下划线
// \W : 与上面相反
// \s : 匹配任意的空白符
// \S : 与上面相反
// \d : 匹配数字
// \D : 与上面相反
// \b : 匹配单词的开始或结束
// \B : 与上面相反

{
  let str = 'hello wqed12*e12ewfqw34g4366u7ihnghd';
  let reg1 = /\bhe/g;
  let res1 = str.match(reg1);
  console.log(res1)
}

{
  var str = "http://www.runoob.com:80/html/html-tutorial.html?23";
  var patt1 = /(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/;
  var arr = str.match(patt1);
  console.log(arr)
}
